function [] = SelectROIs(lsmFileName,matFileName,path)
% To use many of the subsequent functions in this collection one must
% include certain features in the filename. Most labels may be left out
% if they are not useful in describing the dataset collected.
% EXAMPLE: GH146Gal4UASGC5trpA1 f##R##X t##C GrpS ##OCT FLt2GC5 s1trpA1p
% DM5l DM5r DM6l DM3r DM3l VA6r 2012-03-03 DM2ls DM2rs.lsm where # is a number
% Fly,Run and Sub-Run helps to provide some structure to the data collection.
 % This should be in the format f03r02a where the run is each train of stimuli
% given(these will be averaged for an n value) and each subrun (if it is necessary in describing
% the organisation of the data collected) is described by a lower
% case letter.
% Genotype: a label that precedes the fly and run number
% Date: found by 8 consecutive numbers (ignoring spaces,'.' and '-'). the
% format should be yyyy-mm-dd
% Fluorophore: Recognised by FL followed by t or s,a number and 3 more characters.
% the first character is the effector sequence (t for pLot or s for UAS).
 % the second character is the number of copies expressed.
% Temperature: t##C defines the temp the reservoir was at.
% TrpA1: s1trpA1d is recognised as trpA1 being driven in the fly. again s
% or t denote the construct type and 1 is the number of transgenes
% expressed

global figHandles;
figHandles = [];
% -----------------------------------
 % The GetMatDir function opens a user-selected
% directory and checks if a Matfiles directory exists within it.
%  If no such directory exists, one is created and populated with
% matfiles generated by the MatFileInitialisation function. These
% matfiles are of the  structure datatype (and can be generated using the
% CheckFieldNames function) that store all basic information regarding
% the fluorescence time-series and the ROIs selected by the user. The
 % MatfileInitialisation function could be edited to convert files
 % other than the .lsm file format into such a matfile.
[matDir, userDefinedMatFiles] = InitialiseFiles;

%  -----------------------------------
% disp('Filtering out all runs but 1-2')
% userDefinedMatFiles= userDefinedMatFiles(regexpcell(userDefinedMatFiles,'f\d\dr0[1-2][a-z]'));
cd(matDir)
SetupFigures;
currentMatFileIndex= 1;
intensityViewingFactor = 3;glomeruliInfo = {};commentEdited = 0;
while 1
    % Individual file loading

    currentMatFileName = userDefinedMatFiles{currentMatFileIndex};

        if ~commentEdited
            % file must be loaded every time to properly save comments (except
            % when comments are edited by the initial menu whereby the load can
            % be skipped
            [reviewingStatus, pic,lsmDescriptors, glomeruliInfo,userChoiceToAnalyseFile]...
                =  LoadImageFile(currentMatFileName); %need to figure out what variables to output
        else
            [ userChoiceToAnalyseFile] = GetUsersChoiceForDeltaF;
        end
        commentEdited = 0;

    switch userChoiceToAnalyseFile
        case 1
            % continue and analyse file

        case 2 % next file
            if currentMatFileIndex == length(userDefinedMatFiles)
                NoMoreFilesDialog
                continue
            else
                currentMatFileIndex = currentMatFileIndex+1;
                continue
            end
        case 3 % previous file
            if currentMatFileIndex == 1
                NoMoreFilesDialog
                continue
            else
                currentMatFileIndex = currentMatFileIndex-1;
                continue
            end
        case 4
            currentMatFileIndex = listdlg('ListString',userDefinedMatFiles);
            continue
        case 5
            show_stack(pic)
            intensityViewingFactor = 3;
            continue
        case 6
            show_stack(pic*intensityViewingFactor)
            intensityViewingFactor = intensityViewingFactor+3;
            continue
        case 7
            try
                potentiallyModifiedComments=inputdlg('Enter comments on this file if required','Comments',[1 100],glomeruliInfo(1).previousLsmInfo.lsmDescriptors.comments);
                [matFile, fileEditStatus] = LoadDeltaFMatVariable(currentMatFileName);
                keyboard % check execution
                if ~fileEditStatus
                    errordlg(...
                             'Cannot add comments to unprocessed file',...
                             'Failure to edit comments')
                end

                if ~strcmp(potentiallyModifiedComments,matFile(1).previousLsmInfo.lsmDescriptors.comments)
                    if isempty(potentiallyModifiedComments)
                        potentiallyModifiedComments = {' '};
                    end
                    commentEdited = 1;
                    lsmDescriptors.comments = potentiallyModifiedComments; % for contin
                    glomeruliInfo(1).previousLsmInfo.lsmDescriptors.comments = potentiallyModifiedComments; % (for rerun without reloading )
                    matFile(1).previousLsmInfo.lsmDescriptors.comments = potentiallyModifiedComments;
                    matFileName=GetMatFileName(matFile(1).previousLsmInfo.lsmDescriptors.lsmFileName);
                    eval([matFileName(1:end-4) '=matFile;']);
                    save(matFileName, matFileName(1:end-4))
                    clear matFile

                end
                continue
            catch
                keyboard
            end
        case 8 % end analysis
            break
    end


    % Saving original background in case the user does not ask to edit it. Then
    % gives all previous info to GetMeanBackgroundPixelIntensity which will return the coordinates
    % of the shape and then in this case the mean background as
    % glomeruliInfo(1).deltaF along with the heatmaps and displayPic.
    [glomeruliInfo,displayPic] = GetMeanBackgroundPixelIntensity(reviewingStatus,lsmDescriptors, pic,glomeruliInfo);

    % Returns glomeruliInfo with the names field filled out. if reviewingStatus,
    % elements not selected by user for keeping are deleted. elements to be editted can be
    % found in the glomeruliToAnalyse field of the first element.Silent
    % glomeruli obtained too
    [glomeruliInfo] = GetListOfGlomeruliToAnalyse(glomeruliInfo,lsmDescriptors,reviewingStatus);

    %% Analyse glomeruli and increment for next iteration
    if isempty(glomeruliInfo(1).glomeruliToBeAnalysed)
        disp('no glomeruli!!!')
        if currentMatFileIndex < length(userDefinedMatFiles)
            currentMatFileIndex = currentMatFileIndex + 1;
        else
            NoMoreFilesDialog
            break
        end
     else
         [matFileName] = AnalyseGlomerularFluorescence(reviewingStatus, pic, lsmDescriptors, glomeruliInfo,displayPic,currentMatFileName)
         userDefinedMatFiles{currentMatFileIndex} = matFileName;
         if currentMatFileIndex < length(userDefinedMatFiles)
            currentMatFileIndex = currentMatFileIndex + 1;
         else
            NoMoreFilesDialog
            continue
         end
     end
end
close all
end
